// let board = 
// [["8","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]

// let board =
//          [["5", "3", ".", ".", "7", ".", ".", ".", "."]
//         , ["6", ".", "3", "1", "9", "5", ".", ".", "."]
//         , [".", "9", "8", ".", ".", ".", ".", "6", "."]
//         , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
//         , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
//         , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
//         , [".", "6", ".", ".", ".", ".", "2", "8", "."]
//         , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
//         , [".", ".", ".", ".", "8", ".", ".", "7", "9"]];

let board = 
    [[".",".",".","1",".","8",".",".","."],
     [".",".",".",".",".",".",".",".","."],
     [".",".",".",".",".",".",".",".","."],
     ["4",".",".",".",".","7",".",".","."],
     [".",".",".","7",".",".","8","4","1"],
     [".",".",".",".","7",".",".",".","."],
     [".",".",".",".",".",".","6",".","."],
     [".",".",".","6",".",".",".",".","."],
     ["6",".",".",".",".",".",".",".","."]]

function isValidSudoku(board) {
    let arrX = [];
    let arrY = [];
    let arrZ = [];

    let arrA = []


    for (let m = 0; m < board.length; m++) {
        for (let n = 0; n < board.length; n++) {
          
            
            if ((m/2 == 1 || m/5 == 1 || m/8 == 1) && (n/2 == 1 || n/5 == 1 || n/8 == 1)) {
                arrA.push(board[m-2][n-2], board[m-2][n-1], board[m-2][n], board[m-1][n-2], board[m-1][n-1], 
                         board[m-1][n], board[m][n-2], board[m][n-1], board[m][n])
                let arrAlength = arrA.filter((value, index) => arrA.indexOf(value) != index && value != '.');
                // console.log(arrA)
                arrA = [];
                 // console.log(arrAlength, arrAlength.length)
                if (arrAlength.length > 0) {
                    return false
                }
            }


            let x = !isNaN(parseInt(board[m][n])) ? parseInt(board[m][n]) : false;
            let y = !isNaN(parseInt(board[n][m])) ? parseInt(board[n][m]) : false;
            // console.log(x,y)
            if (x !== false) {
                if (arrX.indexOf(x) == -1) {
                    arrX.push(x);
                } else {
                    return false;
                }
            }

            if (y !== false) {
                if (arrY.indexOf(y) == -1) {
                    arrY.push(y);
                } else {
                    return false;
                }
            }

        }
        arrX = [];
        arrY = [];
    }
    return true;
}

console.log(isValidSudoku(board))
